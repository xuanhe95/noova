Index: project/src/cis5550/jobs/PageRank.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cis5550.jobs;\n\nimport cis5550.flame.*;\nimport cis5550.kvs.Row;\nimport cis5550.tools.Hasher;\nimport cis5550.tools.Logger;\nimport cis5550.tools.URLParser;\n\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class PageRank {\n    private static final Logger log = Logger.getLogger(PageRank.class);\n    private static final double DECAY_RATE = 0.85;\n    private static final double WEIGHTED_FACTOR = 0.15;\n\n    private static final String PAGE_RANK_TABLE = \"pt-pageranks\";\n\n    private static final String URL_PAGE_DELIMITER = \"___\";\n\n    private static final String URL_DELIMITER = \" \";\n\n    private static final String DUMMY_URL = \"Dummy\";\n\n    private static double convergenceThreshold = 0.001;\n    static double convergenceRatioInPercentage = 100.0;\n    public static void run(FlameContext ctx, String[] args) {\n\n\n        try {\n            convergenceThreshold = Double.parseDouble(args[0]);\n\n            if(args.length > 1){\n                convergenceRatioInPercentage = Double.parseDouble(args[1]);\n                if(convergenceRatioInPercentage < 0 || convergenceRatioInPercentage > 100){\n                    convergenceRatioInPercentage = 100;\n                    log.error(\"Convergence ratio must be between 0 and 100. Using default value: 100\");\n                    //throw new IllegalArgumentException(\"Convergence threshold must be positive\");\n                }\n            } else{\n                convergenceRatioInPercentage = 100;\n            }\n\n            log.info(\"[page rank] Overall Convergence Threshold: \" + convergenceRatioInPercentage);\n\n\n            FlameRDD rdd = ctx.fromTable(\"pt-crawl\", row -> row.get(\"url\") + URL_PAGE_DELIMITER + row.get(\"page\"));\n            FlamePairRDD stateTable = rdd.mapToPair(s -> {\n                // log.info(\"[page rank] Mapping: \" + s);\n                String[] parts = s.split(URL_PAGE_DELIMITER);\n\n                String normalizedUrl = parts[0];\n                String hashedUrl = Hasher.hash(parts[0]);\n                String page = parts.length > 1 ? parts[1] : \"\";\n                // extract links from the page\n                List<String> links = parsePageLinks(ctx, page, normalizedUrl, null);\n\n                Set<String> linkSet = new HashSet<>(links);\n\n\n\n                log.info(\"[page rank load] Links size: \" + links.size());\n                StringBuilder state = new StringBuilder();\n                state.append(\"1.0\").append(\",\")\n                        .append(\"1.0\").append(\",\");\n                // log.info(\"[page rank load] Page: \" + page);\n                log.info(\"[page rank load] Hashed URL: \" + hashedUrl);\n                log.info(\"[page rank load] Normalized URL: \" + normalizedUrl);\n                if(links.isEmpty()){\n                    log.warn(\"[page rank load] This is a sink node: \" + normalizedUrl);\n                    ctx.getKVS().put(\"sink\", hashedUrl, \"url\", normalizedUrl );\n                }\n                for (String link : linkSet) {\n                    log.info(\"[page rank load] In page link: \" + link);\n                    Row row = ctx.getKVS().getRow(\"linkset\", normalizedUrl);\n                    if(row == null){\n                        row = new Row(normalizedUrl);\n                    }\n                    row.put(Hasher.hash(link), link);\n                    ctx.getKVS().putRow(\"linkset\", row);\n\n                    state.append(Hasher.hash(link)).append(URL_DELIMITER);\n                }\n                state.append(DUMMY_URL);\n                //state.deleteCharAt(state.length() - URL_DELIMITER.length());\n                log.info(\"[page rank load] State: \" + state.toString());\n                return new FlamePair(hashedUrl, state.toString());\n            });\n\n            AtomicInteger count = new AtomicInteger(1);\n            log.info(\"[page rank] Starting iterations\");\n            stateTable = updateTable(stateTable);\n            log.info(\"Updated table\");\n            while(!isConverged(stateTable)) {\n                log.info(\"Iteration: \" + count.incrementAndGet());\n                stateTable = updateTable(stateTable);\n            }\n            log.info(\"[page rank] Converged after \" + count.get() + \" iterations\");\n\n            stateTable.flatMapToPair(pair -> {\n                log.info(\"[output] Pair: \" + pair);\n                String hashedUrl = pair._1();\n                String state = pair._2();\n                String[] parts = state.split(\",\");\n                double rank = Double.parseDouble(parts[0]);\n                Row row = new Row(hashedUrl);\n\n                log.info(\"[output] Current: \" + rank + \" Previous: \" + parts[1]);\n\n                row.put(\"rank\", String.valueOf(rank));\n                ctx.getKVS().putRow(PAGE_RANK_TABLE, row);\n                return new ArrayList<>();\n            });\n\n            log.info(\"[page rank] Finished\");\n\n\n\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    private static FlamePairRDD transferTable(FlamePairRDD stateTable) throws Exception {\n        FlamePairRDD rdd = stateTable.flatMapToPair(hashedUrlWithState -> {\n            log.info(\"[transfer] ===========================================\");\n            String hashedUrl = hashedUrlWithState._1();\n            String state = hashedUrlWithState._2();\n\n            String[] parts = state.split(\",\");\n            double rankCurrent = Double.parseDouble(parts[0]);\n            double rankPrevious = Double.parseDouble(parts[1]);\n\n            log.info(\"[transfer] Hashed URL: \" + hashedUrl);\n\n            List<FlamePair> pairs = new ArrayList<>();\n\n            pairs.add(new FlamePair(hashedUrl, \"0.0\"));\n            // for the case where there are no links\n            String[] pageUrls = parts.length > 2 ? parts[2].split(URL_DELIMITER) : null;\n            if(pageUrls == null){\n                log.warn(\"[transfer] No links found, malformed state: \" + hashedUrl);\n                return pairs;\n            }\n            // remove the dummy URL\n            int size = pageUrls.length-1;\n            log.info(\"[transfer] Size: \" + size);\n            // this should be different with pageUrls, since it should\n            if(size == 0){\n                log.warn(\"[transfer] No links found, size is 0: \" + hashedUrl);\n                return pairs;\n            }\n\n            double decayedValuePerLink = DECAY_RATE * rankCurrent / size;\n            log.info(\"[transfer] Decayed value per page: \" + decayedValuePerLink);\n            for(String pageUrl : pageUrls) {\n                if(pageUrl.equals(DUMMY_URL)){\n                    // skip the dummy URL\n                    continue;\n                }\n\n                log.info(\"[transfer] From URL: \" + hashedUrl + \" -> Page URL: \" + pageUrl);\n                //String hashedPageUrl = Hasher.hash(pageUrl);\n//                if(pageUrl.equals(hashedUrl)) {\n//                    // if point to itself, then no need to transfer\n//                    log.info(\"[transfer] Pointing to itself: \" + pageUrl);\n//                    pairs.add(new FlamePair(pageUrl, \"0.0\"));\n//                } else{\n                    pairs.add(new FlamePair(pageUrl, String.valueOf(decayedValuePerLink)));\n//                }\n            }\n            return pairs;\n        });\n\n        log.info(\"collecting transfer table\");\n        AtomicInteger count = new AtomicInteger(0);\n        rdd.collect().forEach(pair -> {\n            count.getAndIncrement();\n            log.info(\"[transfer] Pair: \" + pair);\n        });\n        log.info(\"[transfer] Collected \" + count.get() + \" rows\");\n\n        return rdd.foldByKey(\"0\", (s, t) -> {\n            double v1 = Double.parseDouble(s);\n            double v2 = Double.parseDouble(t);\n            log.info(\"[decayed sum] Fold: \" + v1 + \" \" + v2);\n            log.info(\"[decayed sum]\" + (v1 + v2));\n            return String.valueOf(v1 + v2);\n        });\n    }\n\n    private static FlamePairRDD updateTable(FlamePairRDD stateTable) throws Exception {\n        log.info(\"[page rank] Updating table\");\n        FlamePairRDD transferTable = transferTable(stateTable);\n\n//        stateTable.collect().forEach(pair -> {\n//            log.info(\"[page rank] State: \" + pair);\n//        });\n//\n//        transferTable.collect().forEach(pair -> {\n//            log.info(\"[page rank] Transfer: \" + pair);\n//        });\n\n\n        return stateTable.join(transferTable).flatMapToPair(hashedUrlWithState -> {\n            log.info(\"[update] ===========================================\");\n            String hashedUrl = hashedUrlWithState._1();\n            String[] state = hashedUrlWithState._2().split(\",\");\n            log.info(\"[page rank] Parts: \" + hashedUrlWithState._2());\n\n            double decayedValue = Double.parseDouble(state[3]);\n\n//            if(state.length < 4){\n//                log.warn(\"[update] Malformed state: \" + hashedUrlWithState._2());\n//                decayedValue = Double.parseDouble(state[2]);\n//            } else {\n//                decayedValue = Double.parseDouble(state[3]);\n//                //log.info(\"[page rank] Parts: \" + parts[0] + \" \" + parts[1] + \" \" + parts[2] + \" \" + parts[3]);\n//            }\n            // make old current rank as previous rank\n            double newRankPrevious = Double.parseDouble(state[0]);\n            // add the weighted factor to the new current rank\n            double newRankCurrent = decayedValue + (1 - DECAY_RATE);\n\n            String pageUrls = state[2];\n            log.info(\"[update] Decayed Value: \" + decayedValue);\n            log.info(\"[update] URL: \" + hashedUrl  + \" New Rank: \" + newRankCurrent + \" Prev Rank: \" + newRankPrevious);\n            FlamePair newHashedUrlWithState = new FlamePair(hashedUrl, newRankCurrent + \",\" + newRankPrevious + \",\" + pageUrls);\n            return Collections.singletonList(newHashedUrlWithState);\n        });\n    }\n\n    private static boolean isConverged(FlamePairRDD stateTable) throws Exception {\n        log.info(\"Checking for convergence\");\n\n        String maxValues = stateTable.flatMap(hashedUrlWithState -> {\n            String[] state = hashedUrlWithState._2().split(\",\");\n            double rankCurrent = Double.parseDouble(state[0]);\n            double rankPrevious = Double.parseDouble(state[1]);\n            double diff = Math.abs(rankCurrent - rankPrevious);\n            log.info(\"[check convergence] Diff: \" + diff);\n            return Collections.singletonList(String.valueOf(diff));\n        }).fold(\"\", (s, t) -> {\n            if(s.isEmpty()){\n                return t;\n            }\n            return s + \" \" + t;\n        });\n\n        String[] maxValuesArray = maxValues.split(\" \");\n        int totalCount = maxValuesArray.length;\n        AtomicInteger convergedCount = new AtomicInteger(0);\n        double maxValue = Double.MIN_VALUE;\n        for(String value : maxValuesArray){\n            log.info(\"[check convergence] Value: \" + value);\n            if(Double.parseDouble(value) < convergenceThreshold){\n                log.warn(\"[check convergence] Converged by threshold: \" + value + \" Threshold: \" + convergenceThreshold);\n                convergedCount.incrementAndGet();\n            }\n            maxValue = Math.max(maxValue, Double.parseDouble(value));\n        }\n\n\n        log.info(\"Max Value: \" + maxValue);\n        log.info(\"[check convergence] Converged Threshold: \" + totalCount * convergenceRatioInPercentage + \" \" + convergedCount.get() * 100);\n        // return (convergedCount / (double) totalCount) * 100 >= convergenceRatioInPercentage;\n\n        if(totalCount * convergenceRatioInPercentage <= convergedCount.get() * 100){\n            log.warn(\"[check convergence] Converged by threshold: \" + \"Total: \" + totalCount + \" Converged: \" + convergedCount + \" Threshold: \" + convergenceRatioInPercentage);\n            return true;\n        }\n        return false;\n        // return maxValue < convergenceThreshold;\n    }\n\n    private static String filterPage(String page) {\n        if(page == null){\n            return null;\n        }\n        String regex = \"<[^>]*>\";\n        return page.replaceAll(regex, \"\");\n    }\n    static List<String> parsePageLinks(FlameContext ctx, String page, String normalizedUrl, String blacklistTable) throws IOException {\n        List<String> links = new ArrayList<>();\n        log.info(\"[crawler] Parsing links from URL: \" + normalizedUrl);\n        String hashedUrl = Hasher.hash(normalizedUrl);\n\n\n        String regex = \"<a\\\\s+[^>]*href=[\\\"']([^\\\"']*)[\\\"'][^>]*>([\\\\s\\\\S]*?)</a\\\\s*>\";\n        Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);\n        Matcher matcher = pattern.matcher(page);\n\n\n        Map<String, StringBuilder> anchorMap = new HashMap<>();\n\n        while (matcher.find()) {\n\n            String href = matcher.group(1).strip();\n            log.info(\"[crawler] Found link: \" + href);\n            // for EC\n            String text = matcher.group(2).strip();\n\n\n            String normalizedLink = normalizeURL(href, normalizedUrl);\n            if(normalizedLink == null){\n                log.warn(\"[crawler] URL \" + href + \" is not a valid URL. Skipping.\");\n                continue;\n            }\n\n            // log.info(\"[crawler] add link: \" + normalizedLink);\n\n            // anchorMap.put(normalizedLink, anchorMap.getOrDefault(normalizedLink, new StringBuilder()).append(text).append(\"<br>\"));\n\n//            if(isAccessed(ctx, normalizedLink)){\n//                log.info(\"[crawler] URL \" + normalizedLink + \" is accessed before. Ignore.\");\n//                continue;\n//            }\n\n            links.add(normalizedLink);\n        }\n\n        return links;\n    }\n\n    static String normalizeURL(String rawUrl, String baseUrl){\n        if(rawUrl.contains(\"#\")){\n            rawUrl = rawUrl.substring(0, rawUrl.indexOf(\"#\"));\n        }\n        if(rawUrl.isEmpty()){\n            return null;\n        }\n        if(rawUrl.startsWith(\"..\")){\n            rawUrl = rawUrl.replace(\"..\", \"\");\n            rawUrl = baseUrl.substring(0, baseUrl.lastIndexOf(\"/\")) + rawUrl;\n        }\n\n        String[] parts = URLParser.parseURL(rawUrl);\n\n        String protocol;\n        String host;\n        String port;\n        String path;\n\n        if (parts[0] == null && parts[1] == null) {\n            protocol = URLParser.parseURL(baseUrl)[0] == null ? \"http\" : URLParser.parseURL(baseUrl)[0];\n            host = URLParser.parseURL(baseUrl)[1];\n            port = URLParser.parseURL(baseUrl)[2] == null ? \"http\".equals(protocol) ? \"80\" : \"443\" : URLParser.parseURL(baseUrl)[2];\n            path = parts[3];\n        } else {\n            protocol = parts[0] == null ? \"http\" : parts[0];\n            host = parts[1] == null ? URLParser.parseURL(baseUrl)[1] : parts[1];\n            port = parts[2] == null ? \"http\".equals(protocol) ? \"80\" : \"443\" : parts[2];\n            path = parts[3];\n        }\n        return protocol + \"://\" + host + \":\" + port + path;\n    }\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/cis5550/jobs/PageRank.java b/project/src/cis5550/jobs/PageRank.java
--- a/project/src/cis5550/jobs/PageRank.java	(revision f3e5188cbd8ccd0af3fc9c2dbb4ca5ab781c0f9c)
+++ b/project/src/cis5550/jobs/PageRank.java	(date 1731395141105)
@@ -19,7 +19,7 @@
 
     private static final String PAGE_RANK_TABLE = "pt-pageranks";
 
-    private static final String URL_PAGE_DELIMITER = "___";
+    private static final String URL_PAGE_DELIMITER = "___"; // comma?
 
     private static final String URL_DELIMITER = " ";
 
@@ -27,8 +27,10 @@
 
     private static double convergenceThreshold = 0.001;
     static double convergenceRatioInPercentage = 100.0;
-    public static void run(FlameContext ctx, String[] args) {
-
+    public static void run(FlameContext ctx, String[] args) throws Exception {
+        // del old table for fresh run
+        ctx.getKVS().delete("pt-state");
+        ctx.getKVS().delete("pt-pageranks");
 
         try {
             convergenceThreshold = Double.parseDouble(args[0]);
@@ -296,14 +298,14 @@
         Matcher matcher = pattern.matcher(page);
 
 
-        Map<String, StringBuilder> anchorMap = new HashMap<>();
+//        Map<String, StringBuilder> anchorMap = new HashMap<>();
 
         while (matcher.find()) {
 
             String href = matcher.group(1).strip();
             log.info("[crawler] Found link: " + href);
             // for EC
-            String text = matcher.group(2).strip();
+//            String text = matcher.group(2).strip();
 
 
             String normalizedLink = normalizeURL(href, normalizedUrl);
Index: project/test_results.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"simple\": { \"testStatus\": \"FAIL\", \"testComments\": \"The file ./worker1/pt-index/well was not found in the KVS.\", \"maxPoints\": 40, \"points\": 0 }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/test_results.json b/project/test_results.json
--- a/project/test_results.json	(revision f3e5188cbd8ccd0af3fc9c2dbb4ca5ab781c0f9c)
+++ b/project/test_results.json	(date 1731397902330)
@@ -1,3 +1,3 @@
 {
-  "simple": { "testStatus": "FAIL", "testComments": "The file ./worker1/pt-index/well was not found in the KVS.", "maxPoints": 40, "points": 0 }
+  "indexer": { "testStatus": "FAIL", "testComments": "We ran the indexer with some simple test data (all words in lower case, no HTML tags, no punctuation), but the results don't match what we expected. The specific problems we found were:\n\n * 'guavas' is a word in our input data, but we couldn't find a row with that key in the 'pt-index' table after running the job.\n * 'elderberries' is a word in our input data, but we couldn't find a row with that key in the 'pt-index' table after running the job.\n * 'hazelnuts' is a word in our input data, but we couldn't find a row with that key in the 'pt-index' table after running the job.\n * 'coconuts' is a word in our input data, but we couldn't find a row with that key in the 'pt-index' table after running the job.\n * 'bananas' is a word in our input data, but we couldn't find a row with that key in the 'pt-index' table after running the job.\n * 'dates' is a word in our input data, but we couldn't find a row with that key in the 'pt-index' table after running the job.\n * 'apples' is a word in our input data, but we couldn't find a row with that key in the 'pt-index' table after running the job.\n", "maxPoints": 25, "points": 0 }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"ALL\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"f685182f-71a7-43bb-8578-6f9141222a47\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/noova/.idea/codeStyles/Project.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/noova/.idea/codeStyles/codeStyleConfig.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/noova/manualRm.sh\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/README.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/README.md\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/noova/start.sh\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/noova/start.sh\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$PROJECT_DIR$/project/src/cis5550/kvs/Coordinator.java\" root0=\"FORCE_HIGHLIGHTING\" />\n  </component>\n  <component name=\"KubernetesApiPersistence\">{}</component>\n  <component name=\"KubernetesApiProvider\">{\n  &quot;isMigrated&quot;: true\n}</component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 8\n}</component>\n  <component name=\"ProjectId\" id=\"2oftgIYxwQgmeNotYISV949IsnF\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Application.FlameCoordinator.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/xander/Documents/git/noova/24fa-cis5550-Noova&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\n    &quot;settings.build.tools.auto.reload&quot;: &quot;ALL&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;build.tools&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RunManager\" selected=\"Application.FlameCoordinator\">\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\n      <module name=\"24fa-cis5550-Noova\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\n      <module name=\"Noova\" />\n      <option name=\"filePath\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23726.103\" />\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23726.103\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"f685182f-71a7-43bb-8578-6f9141222a47\" name=\"Changes\" comment=\"\" />\n      <created>1731272569387</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1731272569387</updated>\n      <workItem from=\"1731272570246\" duration=\"996000\" />\n      <workItem from=\"1731273587212\" duration=\"68000\" />\n      <workItem from=\"1731275929052\" duration=\"54000\" />\n      <workItem from=\"1731304633683\" duration=\"1599000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand />\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f3e5188cbd8ccd0af3fc9c2dbb4ca5ab781c0f9c)
+++ b/.idea/workspace.xml	(date 1731399609065)
@@ -5,12 +5,13 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="f685182f-71a7-43bb-8578-6f9141222a47" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/noova/.idea/codeStyles/Project.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/noova/.idea/codeStyles/codeStyleConfig.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/noova/manualRm.sh" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/noova/start.sh" beforeDir="false" afterPath="$PROJECT_DIR$/noova/start.sh" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/project/job-1.jar" beforeDir="false" afterPath="$PROJECT_DIR$/project/job-1.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/project/job-2.jar" beforeDir="false" afterPath="$PROJECT_DIR$/project/job-2.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/project/job-3.jar" beforeDir="false" afterPath="$PROJECT_DIR$/project/job-3.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/project/pagerank.jar" beforeDir="false" afterPath="$PROJECT_DIR$/project/pagerank.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/project/src/cis5550/jobs/PageRank.java" beforeDir="false" afterPath="$PROJECT_DIR$/project/src/cis5550/jobs/PageRank.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/project/test_results.json" beforeDir="false" afterPath="$PROJECT_DIR$/project/test_results.json" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -39,28 +40,33 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Application.FlameCoordinator.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;/Users/xander/Documents/git/noova/24fa-cis5550-Noova&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
-    &quot;settings.build.tools.auto.reload&quot;: &quot;ALL&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;build.tools&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Application.FlameCoordinator.executor": "Run",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "git-widget-placeholder": "main",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "/Users/ritazhang/Desktop/upenn-mcit/555/Noova/project/worker1",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "project.structure.last.edited": "Modules",
+    "project.structure.proportion": "0.0",
+    "project.structure.side.proportion": "0.2",
+    "settings.build.tools.auto.reload": "ALL",
+    "settings.editor.selected.configurable": "build.tools",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/project/worker1" />
+    </key>
+  </component>
   <component name="RunManager" selected="Application.FlameCoordinator">
     <configuration default="true" type="JetRunConfigurationType">
       <module name="24fa-cis5550-Noova" />
